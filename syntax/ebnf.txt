# Here I define the grammar of napkin using something like extended backus-naur
# form.
#
# I have defined in such a way that I can implement it using a recursive-descent
# parser.

# Syntax Grammar
program = stmt* TOKEN_EOF

stmt = exprStmt
     | outputStmt

exprStmt = expr TOKEN_NEWLINE
outputStmt = "output" expr TOKEN_NEWLINE

expr = or
or = and ("or" and)*
and = equality ("and" equality)*
equality = comparison (("==" | "!=") comparison)*
comparison = addition (("<=" | ">=" | "<" | ">" addition)*
addition = multiplication (("+" | "-") multiplication)*
multiplication = exponentiation (("*" | "/") exponentiation)*
exponentiation = unary ("**" unary)*
unary = ("!" | "not" | "-" )? unary | primary
      # note: "not" and "!" are equivalent
primary = keyword | grouping | literal | identifier
grouping = "(" expr ")"

# Lexical Grammar
keyword = "true" | "false" | "output" | "input" | ...
identifier = <letter or underscore> <letter, number, or underscore>*
literal = string | number
string = '"' <text> '"'
number = ("j")? <valid floating point number>
