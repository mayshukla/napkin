# Scoping rules
# - variables are scoped to blocks
# - if variable has never been declared in current block, will incrementally
#   search outward
# - when assigning, interpreter will do a similar incremental check to see if
#   it exists in the current or an outer scope. If this lookup fails, a new
#   local variable is created

a = "global a"
b = "global b"
c = 3
output a # global a
output b # global b
output c # 3.000000
{
  a = "inner a"
  b = "inner b"
  c = c + 1
  d = "local"
  output a # inner a
  output b # inner b
  output c # 4.000000
  output d # local
}
output a # inner a
output b # inner b
output c # 4.000000
#output d # error